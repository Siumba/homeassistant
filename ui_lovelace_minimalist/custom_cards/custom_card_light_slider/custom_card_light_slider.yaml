custom_card_light_slider:
  template:
    - ulm_language_variables
  variables:
    ulm_card_light_slider_collapse_name: "[[[ return entity.attributes.friendly_name ]]]"
  show_icon: false
  show_name: false
  show_label: false
  state:
    - operator: template
      value: "[[[ return entity.state == 'on' ]]]"
      styles:
        card:
          - background-color: >
              [[[
                if (states['sun.sun'].state == "below_horizon"){
                  var color = entity.attributes.rgb_color;
                  if (color){
                     return 'rgba(' + entity.attributes.rgb_color + ',var(--opacity-bg))'
                  }
                  else{
                    return 'rgba(var(--color-yellow),var(--opacity-bg))'
                  } 
                }else if (states['sun.sun'].state == "above_horizon")
                  return 'rgba(var(--color-background-yellow),var(--opacity-bg))';
              ]]]
        grid:
          - row-gap: 12px
  hold_action:
    action: >
      [[[
          if (variables.ulm_card_light_enable_popup){
            return 'fire-dom-event'
          }
          else{
            return 'more-info'
          }
      ]]]
    browser_mod:
      command: "popup"
      large: true
      hide_header: true
      card:
        type: "custom:button-card"
        template: "popup_light_brightness"
        variables:
          ulm_popup_light_entity: "[[[ return entity.entity_id ]]]"
  styles:
    grid:
      - grid-template-areas: '"item1" "item2"'
      - grid-template-columns: 1fr
      - grid-template-rows: min-content min-content
    card:
      - border-radius: var(--border-radius)
      - box-shadow: var(--box-shadow)
      - padding: 12px
  custom_fields:
    item1:
      card:
        type: "custom:button-card"
        template:
          - icon_info
          - color_slider
        entity: "[[[ return entity.entity_id ]]]"
        label: >-
          [[[  
            if (entity.state !='unavailable'){
              if (entity.state =='off'){
                return variables.ulm_off;  
              } else if (entity.state == 'on'){
                if (entity.attributes.brightness != null){
                  var bri = Math.round(entity.attributes.brightness / 2.55);
                  return (bri ? bri : '0') + '%';
                } else {
                  return variables.ulm_on
                } 
              }
            } else {
              return variables.ulm_unavailable;
            }
          ]]]
        name: "[[[ return variables.ulm_card_light_slider_collapse_name ]]]"
        hold_action:
          action: >
            [[[
                if (variables.ulm_card_light_enable_popup){
                  return 'fire-dom-event'
                }
                else{
                  return 'more-info'
                }
            ]]]
          browser_mod:
            command: "popup"
            large: true
            hide_header: true
            card:
              type: "custom:button-card"
              template: "popup_light_brightness"
              variables:
                ulm_popup_light_entity: "[[[ return entity.entity_id ]]]"
        styles:
          card:
            - box-shadow: none
            - border-radius: var(--border-radius) var(--border-radius) var(--border-radius) var(--border-radius)
            - padding: 0px
    item2:
      card:
        type: conditional
        conditions:
          - entity: "[[[ return entity.entity_id ]]]"
            state: "on"
        card:
          type: "custom:my-slider"
          entity: "[[[ return entity.entity_id ]]]"
          radius: 14px
          height: 42px
          mainSliderColor: >
            [[[ 
                var color = entity.attributes.rgb_color;
                if (color){
                   return 'rgba(' + entity.attributes.rgb_color + ',1)'
                }
                else{
                  return 'rgba(var(--color-yellow),1)'
                } 
            ]]]
          secondarySliderColor: >
            [[[ 
                var color = entity.attributes.rgb_color;
                if (color){
                   return 'rgba(' + entity.attributes.rgb_color + ',0.2)';
                }
                else{
                  return 'rgba(var(--color-yellow),0.2)';
                } 
            ]]]
          mainSliderColorOff: rgba(var(--color-theme),0.05)
          secondarySliderColorOff: rgba(var(--color-theme),0.05)
          thumbHorizontalPadding: "0px"
          thumbVerticalPadding: "0px"
          thumbWidth: 0px
          card_mod:
          style: |
            ha-card {
              border-radius: 14px;
              box-shadow: none;
            }

color_slider:
  state:
    - styles:
        icon:
          - color: >
              [[[ 
                  var color = entity.attributes.rgb_color;
                  if (color){
                     return 'rgba(' + entity.attributes.rgb_color + ',1)';
                  }
                  else{
                    return 'rgba(var(--color-yellow),1)';
                  } 
              ]]]
        label:
          - color: >
              [[[
                if (states['sun.sun'].state == "below_horizon"){
                  var color = entity.attributes.rgb_color;
                  if (color){
                     return 'rgba(' + entity.attributes.rgb_color + ',1)'
                  }
                  else{
                    return 'rgba(var(--color-yellow-text),1)'
                  } 
                }else if (states['sun.sun'].state == "above_horizon")
                  return 'rgba(var(--color-yellow-text),1)';
              ]]]
        name:
          - color: >
              [[[
                if (states['sun.sun'].state == "below_horizon"){
                  var color = entity.attributes.rgb_color;
                  if (color){
                     return 'rgba(' + entity.attributes.rgb_color + ',1)'
                  }
                  else{
                    return 'rgba(var(--color-yellow-text),1)'
                  } 
                }else if (states['sun.sun'].state == "above_horizon")
                  return 'rgba(var(--color-yellow-text),1)';
              ]]]
        img_cell:
          - background-color: >
              [[[ 
                  var color = entity.attributes.rgb_color;
                  if (color){
                     return 'rgba(' + entity.attributes.rgb_color + ',0.2)';
                  }
                  else{
                    return 'rgba(var(--color-yellow),0.2)';
                  } 
              ]]]
        card:
          - background-color: "rgba(0,0,0,0)"
      value: "on"
